{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/actions/getposts.ts"],"sourcesContent":["'use server'\n\nimport { client } from 'lib/client'\nimport { ServerActionResponse } from 'lib/error-handling'\n\ninterface Post {\n  _id: string\n  title: string\n  content: string\n  author: {\n    username: string\n  }\n  createdAt: string\n}\n\nexport const getPosts = async (): Promise<ServerActionResponse<Post[]>> => {\n  try {\n    const response = await client.get('/posts')\n    return { data: response.data }\n  } catch (error) {\n    return { error: 'Failed to fetch posts' }\n  }\n}\n"],"names":[],"mappings":";;;;;IAea"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/error-handling.ts"],"sourcesContent":["import { isAxiosError } from 'axios'\nimport { isRedirectError } from 'next/dist/client/components/redirect'\nimport { toast } from 'sonner'\n\n// lib/error-handling.ts\n\nexport type ServerActionResponse<T = any> =\n  | { data: T; error?: never } // Success case\n  | { data?: never; error: string } // Error case\n\nexport const handleServerActionError = <T>(\n  response: ServerActionResponse<T>,\n): T => {\n  if ('error' in response) {\n    throw new Error(response.error)\n  }\n  return response.data\n}\n\nexport const handleAxiosError = (error: unknown): ServerActionResponse => {\n  const defaultErrorMessage = 'something went wrong'\n\n  if (!isAxiosError(error)) {\n    console.error(error)\n    return { error: defaultErrorMessage }\n  }\n\n  return { error: error.response?.data.message || defaultErrorMessage }\n}\n\nexport const toastServerError = (error: Error) => {\n  if (!isRedirectError(error)) {\n    toast.error(error.message)\n  }\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AAFA;;;;AAUO,MAAM,0BAA0B,CACrC;IAEA,IAAI,WAAW,UAAU;QACvB,MAAM,IAAI,MAAM,SAAS,KAAK;IAChC;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,mBAAmB,CAAC;IAC/B,MAAM,sBAAsB;IAE5B,IAAI,CAAC,CAAA,GAAA,iJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ;QACxB,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO;QAAoB;IACtC;IAEA,OAAO;QAAE,OAAO,MAAM,QAAQ,EAAE,KAAK,WAAW;IAAoB;AACtE;AAEO,MAAM,mBAAmB,CAAC;IAC/B,IAAI,CAAC,CAAA,GAAA,mKAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ;QAC3B,2IAAA,CAAA,QAAK,CAAC,KAAK,CAAC,MAAM,OAAO;IAC3B;AACF"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/posts/page.tsx"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport { getPost } from 'actions/getpost'\nimport { handleServerActionError } from 'lib/error-handling'\nimport { useParams } from 'next/navigation'\nimport { useEffect } from 'react'\n\ninterface Post {\n  _id: string\n  title: string\n  content: string\n  author: {\n    username: string\n  }\n  comments: Array<{\n    content: string\n    author: {\n      username: string\n    }\n  }>\n  createdAt: string\n}\n\nconst PostPage = () => {\n  const params = useParams()\n  const postId = params.id as string\n\n  const { mutate, data, isPending, error } = useMutation({\n    mutationFn: async () => {\n      const result = await getPost(postId)\n      return handleServerActionError(result)\n    },\n  })\n\n  useEffect(() => {\n    mutate()\n  }, [mutate, postId])\n\n  if (isPending) return <div>Loading post...</div>\n  if (error) return <div>Error loading post</div>\n\n  const post = data as Post\n  if (!post) return <div>Post not found</div>\n\n  return (\n    <div className='mx-auto max-w-4xl p-4'>\n      <article>\n        <h1 className='text-3xl font-bold'>{post.title}</h1>\n        <div className='mt-2 text-gray-500'>\n          Posted by {post.author.username}\n        </div>\n        <div className='prose mt-6'>{post.content}</div>\n\n        {/* Comments section */}\n        <div className='mt-8'>\n          <h2 className='text-2xl font-bold'>Comments</h2>\n          <div className='mt-4 space-y-4'>\n            {post.comments.map((comment, index) => (\n              <div key={index} className='rounded border p-4'>\n                <p>{comment.content}</p>\n                <div className='mt-2 text-sm text-gray-500'>\n                  By {comment.author.username}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </article>\n    </div>\n  )\n}\n\nexport default PostPage\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AAJA;;;AAFA;;;;;;AAwBA,MAAM,WAAW;;IACf,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,SAAS,OAAO,EAAE;IAExB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACrD,UAAU;oCAAE;gBACV,MAAM,SAAS,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAO,AAAD,EAAE;gBAC7B,OAAO,CAAA,GAAA,2HAAA,CAAA,0BAAuB,AAAD,EAAE;YACjC;;IACF;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR;QACF;6BAAG;QAAC;QAAQ;KAAO;IAEnB,IAAI,WAAW,qBAAO,6LAAC;kBAAI;;;;;;IAC3B,IAAI,OAAO,qBAAO,6LAAC;kBAAI;;;;;;IAEvB,MAAM,OAAO;IACb,IAAI,CAAC,MAAM,qBAAO,6LAAC;kBAAI;;;;;;IAEvB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;;8BACC,6LAAC;oBAAG,WAAU;8BAAsB,KAAK,KAAK;;;;;;8BAC9C,6LAAC;oBAAI,WAAU;;wBAAqB;wBACvB,KAAK,MAAM,CAAC,QAAQ;;;;;;;8BAEjC,6LAAC;oBAAI,WAAU;8BAAc,KAAK,OAAO;;;;;;8BAGzC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAqB;;;;;;sCACnC,6LAAC;4BAAI,WAAU;sCACZ,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,sBAC3B,6LAAC;oCAAgB,WAAU;;sDACzB,6LAAC;sDAAG,QAAQ,OAAO;;;;;;sDACnB,6LAAC;4CAAI,WAAU;;gDAA6B;gDACtC,QAAQ,MAAM,CAAC,QAAQ;;;;;;;;mCAHrB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYxB;GA/CM;;QACW,qIAAA,CAAA,YAAS;QAGmB,iLAAA,CAAA,cAAW;;;KAJlD;uCAiDS"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}