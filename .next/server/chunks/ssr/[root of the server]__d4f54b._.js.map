{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/log-in/form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogInForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogInForm() from the server but LogInForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/log-in/form.tsx <module evaluation>\",\n    \"LogInForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/log-in/form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogInForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogInForm() from the server but LogInForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/log-in/form.tsx\",\n    \"LogInForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,sCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/log-in/page.tsx"],"sourcesContent":["import Link from 'next/link'\n\nimport { LogInForm } from './form'\n\nexport default function LogInPage() {\n  return (\n    <main className='main mt-[20vh] flex grow flex-col items-center'>\n      <div className='flex w-full grow flex-col items-center gap-12'>\n        <h1 className='text-2xl font-bold'>welcome back</h1>\n        <LogInForm />\n      </div>\n      <Link href='/auth/sign-up' className='text-zinc-500'>\n        don&apos;t have an account? sign up\n      </Link>\n    </main>\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,8OAAC,iIAAA,CAAA,YAAS;;;;;;;;;;;0BAEZ,8OAAC,4HAAA,CAAA,UAAI;gBAAC,MAAK;gBAAgB,WAAU;0BAAgB;;;;;;;;;;;;AAK3D"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/auth.ts"],"sourcesContent":["import 'server-only'\n\nimport { cookies } from 'next/headers'\n\nconst setAccessToken = async (accessToken: string) => {\n  const cookieStore = await cookies()\n\n  cookieStore.set('access-token', accessToken, { httpOnly: true })\n}\n\nconst deleteAccessToken = async () => {\n  const cookieStore = await cookies()\n\n  cookieStore.delete('access-token')\n}\n\nconst getAccessToken = async () => {\n  const cookieStore = await cookies()\n\n  return cookieStore.get('access-token')\n}\n\nexport const auth = {\n  setAccessToken,\n  deleteAccessToken,\n  getAccessToken,\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,iBAAiB,OAAO;IAC5B,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEhC,YAAY,GAAG,CAAC,gBAAgB,aAAa;QAAE,UAAU;IAAK;AAChE;AAEA,MAAM,oBAAoB;IACxB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEhC,YAAY,MAAM,CAAC;AACrB;AAEA,MAAM,iBAAiB;IACrB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,YAAY,GAAG,CAAC;AACzB;AAEO,MAAM,OAAO;IAClB;IACA;IACA;AACF"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/client.ts"],"sourcesContent":["import axios from 'axios'\n\nexport const client = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_BASE_URL,\n  headers: { 'Content-Type': 'application/json' },\n})\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACjC,OAAO;IACP,SAAS;QAAE,gBAAgB;IAAmB;AAChD"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/error-handling.ts"],"sourcesContent":["import { isAxiosError } from 'axios'\nimport { isRedirectError } from 'next/dist/client/components/redirect'\nimport { toast } from 'sonner'\n\nexport type ServerActionResponse = { error: string } | undefined | void\n\nexport const handleServerActionError = (response: ServerActionResponse) => {\n  if (response?.error) {\n    throw Error(response.error)\n  }\n}\n\nexport const handleAxiosError = (error: unknown): ServerActionResponse => {\n  const defaultErrorMessage = 'something went wrong'\n\n  if (!isAxiosError(error)) {\n    console.error(error)\n    return { error: defaultErrorMessage }\n  }\n\n  return { error: error.response?.data.message || defaultErrorMessage }\n}\n\nexport const toastServerError = (error: Error) => {\n  if (!isRedirectError(error)) {\n    toast.error(error.message)\n  }\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AAFA;;;;AAMO,MAAM,0BAA0B,CAAC;IACtC,IAAI,UAAU,OAAO;QACnB,MAAM,MAAM,SAAS,KAAK;IAC5B;AACF;AAEO,MAAM,mBAAmB,CAAC;IAC/B,MAAM,sBAAsB;IAE5B,IAAI,CAAC,CAAA,GAAA,8IAAA,CAAA,eAAY,AAAD,EAAE,QAAQ;QACxB,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO;QAAoB;IACtC;IAEA,OAAO;QAAE,OAAO,MAAM,QAAQ,EAAE,KAAK,WAAW;IAAoB;AACtE;AAEO,MAAM,mBAAmB,CAAC;IAC/B,IAAI,CAAC,CAAA,GAAA,gKAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ;QAC3B,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC,MAAM,OAAO;IAC3B;AACF"}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/schemas.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport const signUpSchema = z.object({\n  username: z.string().min(2, 'username must be at least 2 characters'),\n  password: z.string().min(6, 'password must be at least 6 characters'),\n})\n\nexport type SignUpValues = z.infer<typeof signUpSchema>\n\nexport const logInSchema = z.object({\n  username: z.string().min(1, 'username is required'),\n  password: z.string().min(1, 'password is required'),\n})\n\nexport type LogInValues = z.infer<typeof logInSchema>\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B"}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/actions/log-in.ts"],"sourcesContent":["'use server'\n\nimport { auth } from 'lib/auth'\nimport { client } from 'lib/client'\nimport { handleAxiosError, ServerActionResponse } from 'lib/error-handling'\nimport { logInSchema, LogInValues } from 'lib/schemas'\nimport { redirect } from 'next/navigation'\n\nexport const logIn = async (\n  data: LogInValues,\n): Promise<ServerActionResponse> => {\n  const parsedData = logInSchema.parse(data)\n\n  try {\n    const response = await client.post('/auth/log-in', parsedData)\n\n    if (\n      !response.data.accessToken ||\n      typeof response.data.accessToken !== 'string'\n    ) {\n      return { error: 'access token missing' }\n    }\n\n    await auth.setAccessToken(response.data.accessToken)\n  } catch (error) {\n    return handleAxiosError(error)\n  }\n\n  redirect('/')\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;;AAAA;;;;;;;;AAEO,MAAM,QAAQ,OACnB;IAEA,MAAM,aAAa,8GAAA,CAAA,cAAW,CAAC,KAAK,CAAC;IAErC,IAAI;QACF,MAAM,WAAW,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;QAEnD,IACE,CAAC,SAAS,IAAI,CAAC,WAAW,IAC1B,OAAO,SAAS,IAAI,CAAC,WAAW,KAAK,UACrC;YACA,OAAO;gBAAE,OAAO;YAAuB;QACzC;QAEA,MAAM,2GAAA,CAAA,OAAI,CAAC,cAAc,CAAC,SAAS,IAAI,CAAC,WAAW;IACrD,EAAE,OAAO,OAAO;QACd,OAAO,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD,EAAE;IAC1B;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;;;IArBa;;AAAA,+OAAA"}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}