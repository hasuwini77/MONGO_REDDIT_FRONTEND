{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/%28main%29/page.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/%28main%29/page.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmQ,GAChS,iCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/client.ts"],"sourcesContent":["import axios from 'axios'\n\nexport const client = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_BASE_URL,\n  withCredentials: true,\n  headers: { 'Content-Type': 'application/json' },\n})\n\n// client.interceptors.response.use(\n//   (response) => {\n//     console.log('API Response:', response)\n//     return response\n//   },\n//   (error) => {\n//     console.error('API Error:', error)\n//     return Promise.reject(error)\n//   },\n// )\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACjC,OAAO;IACP,iBAAiB;IACjB,SAAS;QAAE,gBAAgB;IAAmB;AAChD,GAEA,oCAAoC;CACpC,oBAAoB;CACpB,6CAA6C;CAC7C,sBAAsB;CACtB,OAAO;CACP,iBAAiB;CACjB,yCAAyC;CACzC,mCAAmC;CACnC,OAAO;CACP,IAAI"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/actions/get-posts.ts"],"sourcesContent":["// actions/get-posts.ts\n'use server'\n\nimport { client } from 'lib/client'\nimport { ServerActionResponse } from 'lib/error-handling'\n\ninterface Post {\n  _id: string\n  title: string\n  content: string\n  author: {\n    username: string\n  }\n  comments: Array<{\n    content: string\n    author: {\n      username: string\n    }\n  }>\n  createdAt: string\n}\n\nexport const getPosts = async (): Promise<ServerActionResponse<Post[]>> => {\n  try {\n    console.log('Server Action: Fetching all posts')\n    const response = await client.get('/posts')\n    console.log('Server Action: API response:', response.data)\n    return { data: response.data }\n  } catch (error: any) {\n    console.error(\n      'Server Action: Error:',\n      error.response?.data || error.message,\n    )\n    return {\n      error:\n        error.response?.data?.message ||\n        error.message ||\n        'Failed to fetch posts',\n    }\n  }\n}\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;AAGvB;;;;;AAmBO,MAAM,WAAW;IACtB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,MAAM,6GAAA,CAAA,SAAM,CAAC,GAAG,CAAC;QAClC,QAAQ,GAAG,CAAC,gCAAgC,SAAS,IAAI;QACzD,OAAO;YAAE,MAAM,SAAS,IAAI;QAAC;IAC/B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CACX,yBACA,MAAM,QAAQ,EAAE,QAAQ,MAAM,OAAO;QAEvC,OAAO;YACL,OACE,MAAM,QAAQ,EAAE,MAAM,WACtB,MAAM,OAAO,IACb;QACJ;IACF;AACF;;;IAlBa;;AAAA,+OAAA"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/error-handling.ts"],"sourcesContent":["// lib/error-handling.ts\nimport { isAxiosError } from 'axios'\nimport { isRedirectError } from 'next/dist/client/components/redirect'\nimport { toast } from 'sonner'\n\nexport type ServerActionResponse<T = any> =\n  | { data: T; error?: never } // Success with data\n  | { token: string; user: T; error?: never } // Success with token and user\n  | { data?: never; error: string } // Error case\n\nexport const handleServerActionError = <T>(\n  response: ServerActionResponse<T>,\n): T => {\n  if ('error' in response) {\n    throw new Error(response.error)\n  }\n  if ('token' in response) {\n    return response.token as unknown as T\n  }\n  return response.data\n}\n\n// Handle Axios errors\nexport const handleAxiosError = (\n  error: unknown,\n): ServerActionResponse<never> => {\n  const defaultErrorMessage = 'something went wrong'\n\n  if (!isAxiosError(error)) {\n    console.error(error)\n    return { error: defaultErrorMessage }\n  }\n\n  return { error: error.response?.data.message || defaultErrorMessage }\n}\n\n// Toast error messages\nexport const toastServerError = (error: Error) => {\n  if (!isRedirectError(error)) {\n    toast.error(error.message)\n  }\n}\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;AAExB;AACA;AAFA;;;;AASO,MAAM,0BAA0B,CACrC;IAEA,IAAI,WAAW,UAAU;QACvB,MAAM,IAAI,MAAM,SAAS,KAAK;IAChC;IACA,IAAI,WAAW,UAAU;QACvB,OAAO,SAAS,KAAK;IACvB;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,mBAAmB,CAC9B;IAEA,MAAM,sBAAsB;IAE5B,IAAI,CAAC,CAAA,GAAA,8IAAA,CAAA,eAAY,AAAD,EAAE,QAAQ;QACxB,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO;QAAoB;IACtC;IAEA,OAAO;QAAE,OAAO,MAAM,QAAQ,EAAE,KAAK,WAAW;IAAoB;AACtE;AAGO,MAAM,mBAAmB,CAAC;IAC/B,IAAI,CAAC,CAAA,GAAA,gKAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ;QAC3B,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC,MAAM,OAAO;IAC3B;AACF"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/schemas.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport const signUpSchema = z.object({\n  username: z.string().min(2, 'username must be at least 2 characters'),\n  password: z.string().min(6, 'password must be at least 6 characters'),\n})\n\nexport type SignUpValues = z.infer<typeof signUpSchema>\n\nexport const logInSchema = z.object({\n  username: z.string().min(1, 'username is required'),\n  password: z.string().min(1, 'password is required'),\n})\n\nexport type LogInValues = z.infer<typeof logInSchema>\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B"}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/actions/log-in.ts"],"sourcesContent":["// actions/log-in.ts\n'use server'\n\nimport { client } from 'lib/client'\nimport { handleAxiosError, ServerActionResponse } from 'lib/error-handling'\nimport { logInSchema, LogInValues } from 'lib/schemas'\n\nexport const logIn = async (\n  data: LogInValues,\n): Promise<ServerActionResponse> => {\n  try {\n    const parsedData = logInSchema.parse(data)\n    const response = await client.post('/auth/log-in', parsedData)\n\n    // Check if we have both token and user in the response\n    if (!response.data.token || !response.data.user) {\n      return { error: 'Invalid response from server' }\n    }\n\n    return {\n      token: response.data.token,\n      user: response.data.user,\n    }\n  } catch (error) {\n    return handleAxiosError(error)\n  }\n}\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;AAGpB;AACA;AACA;;;;;;;AAEO,MAAM,QAAQ,OACnB;IAEA,IAAI;QACF,MAAM,aAAa,8GAAA,CAAA,cAAW,CAAC,KAAK,CAAC;QACrC,MAAM,WAAW,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;QAEnD,uDAAuD;QACvD,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE;YAC/C,OAAO;gBAAE,OAAO;YAA+B;QACjD;QAEA,OAAO;YACL,OAAO,SAAS,IAAI,CAAC,KAAK;YAC1B,MAAM,SAAS,IAAI,CAAC,IAAI;QAC1B;IACF,EAAE,OAAO,OAAO;QACd,OAAO,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD,EAAE;IAC1B;AACF;;;IAnBa;;AAAA,+OAAA"}},
    {"offset": {"line": 306, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}