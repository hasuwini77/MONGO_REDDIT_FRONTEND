{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/sign-up/form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SignUpForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call SignUpForm() from the server but SignUpForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/sign-up/form.tsx <module evaluation>\",\n    \"SignUpForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,2DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/sign-up/form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SignUpForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call SignUpForm() from the server but SignUpForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/sign-up/form.tsx\",\n    \"SignUpForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,uCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/sign-up/page.tsx"],"sourcesContent":["import Link from 'next/link'\n\nimport { SignUpForm } from './form'\n\nexport default function SignUpPage() {\n  return (\n    <main className='main mt-[20vh] flex grow flex-col items-center'>\n      <div className='flex w-full grow flex-col items-center gap-12'>\n        <h1 className='text-2xl font-bold'>welcome</h1>\n        <SignUpForm />\n      </div>\n      <Link href='/auth/log-in' className='text-zinc-500'>\n        already have an account? log in\n      </Link>\n    </main>\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,8OAAC,kIAAA,CAAA,aAAU;;;;;;;;;;;0BAEb,8OAAC,4HAAA,CAAA,UAAI;gBAAC,MAAK;gBAAe,WAAU;0BAAgB;;;;;;;;;;;;AAK1D"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/client.ts"],"sourcesContent":["import axios from 'axios'\n\nexport const client = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_BASE_URL,\n  withCredentials: true,\n  headers: { 'Content-Type': 'application/json' },\n})\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACjC,OAAO;IACP,iBAAiB;IACjB,SAAS;QAAE,gBAAgB;IAAmB;AAChD"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/error-handling.ts"],"sourcesContent":["import { isAxiosError } from 'axios'\nimport { isRedirectError } from 'next/dist/client/components/redirect'\nimport { toast } from 'sonner'\n\n// lib/error-handling.ts\n\nexport type ServerActionResponse<T = any> =\n  | { data: T; error?: never } // Success case\n  | { data?: never; error: string } // Error case\n\nexport const handleServerActionError = <T>(\n  response: ServerActionResponse<T>,\n): T => {\n  if ('error' in response) {\n    throw new Error(response.error)\n  }\n  return response.data\n}\n\nexport const handleAxiosError = (error: unknown): ServerActionResponse => {\n  const defaultErrorMessage = 'something went wrong'\n\n  if (!isAxiosError(error)) {\n    console.error(error)\n    return { error: defaultErrorMessage }\n  }\n\n  return { error: error.response?.data.message || defaultErrorMessage }\n}\n\nexport const toastServerError = (error: Error) => {\n  if (!isRedirectError(error)) {\n    toast.error(error.message)\n  }\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AAFA;;;;AAUO,MAAM,0BAA0B,CACrC;IAEA,IAAI,WAAW,UAAU;QACvB,MAAM,IAAI,MAAM,SAAS,KAAK;IAChC;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,mBAAmB,CAAC;IAC/B,MAAM,sBAAsB;IAE5B,IAAI,CAAC,CAAA,GAAA,8IAAA,CAAA,eAAY,AAAD,EAAE,QAAQ;QACxB,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO;QAAoB;IACtC;IAEA,OAAO;QAAE,OAAO,MAAM,QAAQ,EAAE,KAAK,WAAW;IAAoB;AACtE;AAEO,MAAM,mBAAmB,CAAC;IAC/B,IAAI,CAAC,CAAA,GAAA,gKAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ;QAC3B,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC,MAAM,OAAO;IAC3B;AACF"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/schemas.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport const signUpSchema = z.object({\n  username: z.string().min(2, 'username must be at least 2 characters'),\n  password: z.string().min(6, 'password must be at least 6 characters'),\n})\n\nexport type SignUpValues = z.infer<typeof signUpSchema>\n\nexport const logInSchema = z.object({\n  username: z.string().min(1, 'username is required'),\n  password: z.string().min(1, 'password is required'),\n})\n\nexport type LogInValues = z.infer<typeof logInSchema>\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/actions/sign-up.ts"],"sourcesContent":["'use server'\n\nimport { client } from 'lib/client'\nimport { handleAxiosError, ServerActionResponse } from 'lib/error-handling'\nimport { signUpSchema, SignUpValues } from 'lib/schemas'\nimport { redirect } from 'next/navigation'\n\nexport const signUp = async (\n  data: SignUpValues,\n): Promise<ServerActionResponse> => {\n  const parsedData = signUpSchema.parse(data)\n\n  try {\n    await client.post('/auth/sign-up', parsedData)\n  } catch (error) {\n    return handleAxiosError(error)\n  }\n\n  redirect('/auth/log-in')\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;;AAAA;;;;;;;AAEO,MAAM,SAAS,OACpB;IAEA,MAAM,aAAa,8GAAA,CAAA,eAAY,CAAC,KAAK,CAAC;IAEtC,IAAI;QACF,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,iBAAiB;IACrC,EAAE,OAAO,OAAO;QACd,OAAO,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD,EAAE;IAC1B;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;;;IAZa;;AAAA,+OAAA"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}