{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/favicon.ico.mjs%20%28structured%20image%20object%29"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 48, height: 48 }\n"],"names":[],"mappings":";;;AAAA;;uCACe;IAAE,KAAA,2GAAA,CAAA,UAAG;IAAE,OAAO;IAAI,QAAQ;AAAG"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/log-in/form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogInForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogInForm() from the server but LogInForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/log-in/form.tsx <module evaluation>\",\n    \"LogInForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0DACA"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/log-in/form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogInForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogInForm() from the server but LogInForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/log-in/form.tsx\",\n    \"LogInForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,sCACA"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/auth/log-in/page.tsx"],"sourcesContent":["import Link from 'next/link'\n\nimport { LogInForm } from './form'\n\nexport default function LogInPage() {\n  return (\n    <main className='main mt-[20vh] flex grow flex-col items-center'>\n      <div className='flex w-full grow flex-col items-center gap-12'>\n        <h1 className='text-2xl font-bold'>welcome back</h1>\n        <LogInForm />\n      </div>\n      <Link href='/auth/sign-up' className='text-zinc-500'>\n        don&apos;t have an account? sign up\n      </Link>\n    </main>\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,8OAAC,iIAAA,CAAA,YAAS;;;;;;;;;;;0BAEZ,8OAAC,4HAAA,CAAA,UAAI;gBAAC,MAAK;gBAAgB,WAAU;0BAAgB;;;;;;;;;;;;AAK3D"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/client.ts"],"sourcesContent":["import axios from 'axios'\n\nexport const client = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_BASE_URL,\n  withCredentials: true,\n  headers: { 'Content-Type': 'application/json' },\n})\n\n// client.interceptors.response.use(\n//   (response) => {\n//     console.log('API Response:', response)\n//     return response\n//   },\n//   (error) => {\n//     console.error('API Error:', error)\n//     return Promise.reject(error)\n//   },\n// )\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACjC,OAAO;IACP,iBAAiB;IACjB,SAAS;QAAE,gBAAgB;IAAmB;AAChD,GAEA,oCAAoC;CACpC,oBAAoB;CACpB,6CAA6C;CAC7C,sBAAsB;CACtB,OAAO;CACP,iBAAiB;CACjB,yCAAyC;CACzC,mCAAmC;CACnC,OAAO;CACP,IAAI"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/error-handling.ts"],"sourcesContent":["// lib/error-handling.ts\nimport { isAxiosError } from 'axios'\nimport { isRedirectError } from 'next/dist/client/components/redirect'\nimport { toast } from 'sonner'\n\nexport type ServerActionResponse<T = any> =\n  | { data: T; error?: never } // Success with data\n  | { token: string; user: T; error?: never } // Success with token and user\n  | { data?: never; error: string } // Error case\n\nexport const handleServerActionError = <T>(\n  response: ServerActionResponse<T>,\n): T => {\n  if ('error' in response) {\n    throw new Error(response.error)\n  }\n  if ('token' in response) {\n    return response.token as unknown as T\n  }\n  return response.data\n}\n\n// Handle Axios errors\nexport const handleAxiosError = (\n  error: unknown,\n): ServerActionResponse<never> => {\n  const defaultErrorMessage = 'something went wrong'\n\n  if (!isAxiosError(error)) {\n    console.error(error)\n    return { error: defaultErrorMessage }\n  }\n\n  return { error: error.response?.data.message || defaultErrorMessage }\n}\n\n// Toast error messages\nexport const toastServerError = (error: Error) => {\n  if (!isRedirectError(error)) {\n    toast.error(error.message)\n  }\n}\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;AAExB;AACA;AAFA;;;;AASO,MAAM,0BAA0B,CACrC;IAEA,IAAI,WAAW,UAAU;QACvB,MAAM,IAAI,MAAM,SAAS,KAAK;IAChC;IACA,IAAI,WAAW,UAAU;QACvB,OAAO,SAAS,KAAK;IACvB;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,mBAAmB,CAC9B;IAEA,MAAM,sBAAsB;IAE5B,IAAI,CAAC,CAAA,GAAA,8IAAA,CAAA,eAAY,AAAD,EAAE,QAAQ;QACxB,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO;QAAoB;IACtC;IAEA,OAAO;QAAE,OAAO,MAAM,QAAQ,EAAE,KAAK,WAAW;IAAoB;AACtE;AAGO,MAAM,mBAAmB,CAAC;IAC/B,IAAI,CAAC,CAAA,GAAA,gKAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ;QAC3B,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC,MAAM,OAAO;IAC3B;AACF"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/lib/schemas.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport const signUpSchema = z.object({\n  username: z.string().min(2, 'username must be at least 2 characters'),\n  password: z.string().min(6, 'password must be at least 6 characters'),\n})\n\nexport type SignUpValues = z.infer<typeof signUpSchema>\n\nexport const logInSchema = z.object({\n  username: z.string().min(1, 'username is required'),\n  password: z.string().min(1, 'password is required'),\n})\n\nexport type LogInValues = z.infer<typeof logInSchema>\n\nexport const createPostSchema = z.object({\n  title: z\n    .string()\n    .min(3, 'Title must be at least 3 characters')\n    .max(100, 'Title must be less than 100 characters'),\n  content: z\n    .string()\n    .min(10, 'Content must be at least 10 characters')\n    .max(10000, 'Content must be less than 10000 characters'),\n})\n\nexport type CreatePostValues = z.infer<typeof createPostSchema>\n"],"names":[],"mappings":";;;;;AAAA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,MAAM,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,OAAO,oIAAA,CAAA,IAAC,CACL,MAAM,GACN,GAAG,CAAC,GAAG,uCACP,GAAG,CAAC,KAAK;IACZ,SAAS,oIAAA,CAAA,IAAC,CACP,MAAM,GACN,GAAG,CAAC,IAAI,0CACR,GAAG,CAAC,OAAO;AAChB"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/actions/log-in.ts"],"sourcesContent":["// actions/log-in.ts\n'use server'\n\nimport { client } from 'lib/client'\nimport { handleAxiosError, ServerActionResponse } from 'lib/error-handling'\nimport { logInSchema, LogInValues } from 'lib/schemas'\n\nexport const logIn = async (\n  data: LogInValues,\n): Promise<ServerActionResponse> => {\n  try {\n    const parsedData = logInSchema.parse(data)\n    const response = await client.post('/auth/log-in', parsedData)\n\n    // Check if we have both token and user in the response\n    if (!response.data.token || !response.data.user) {\n      return { error: 'Invalid response from server' }\n    }\n\n    return {\n      token: response.data.token,\n      user: response.data.user,\n    }\n  } catch (error) {\n    return handleAxiosError(error)\n  }\n}\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;AAGpB;AACA;AACA;;;;;;;AAEO,MAAM,QAAQ,OACnB;IAEA,IAAI;QACF,MAAM,aAAa,8GAAA,CAAA,cAAW,CAAC,KAAK,CAAC;QACrC,MAAM,WAAW,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;QAEnD,uDAAuD;QACvD,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE;YAC/C,OAAO;gBAAE,OAAO;YAA+B;QACjD;QAEA,OAAO;YACL,OAAO,SAAS,IAAI,CAAC,KAAK;YAC1B,MAAM,SAAS,IAAI,CAAC,IAAI;QAC1B;IACF,EAAE,OAAO,OAAO;QACd,OAAO,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD,EAAE;IAC1B;AACF;;;IAnBa;;AAAA,+OAAA"}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}