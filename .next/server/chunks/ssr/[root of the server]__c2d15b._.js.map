{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/albert_sans_7362bc5b.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"albert_sans_7362bc5b-module__mXkiUG__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 9, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/albert_sans_7362bc5b.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Albert_Sans%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22albertSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Albert Sans', 'Albert Sans Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,8JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,8JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,8JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0]}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/providers/query-client-provider.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const QueryClientProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call QueryClientProvider() from the server but QueryClientProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/providers/query-client-provider.tsx <module evaluation>\",\n    \"QueryClientProvider\",\n);\nexport const getQueryClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call getQueryClient() from the server but getQueryClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/providers/query-client-provider.tsx <module evaluation>\",\n    \"getQueryClient\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,qEACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,qEACA"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/providers/query-client-provider.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const QueryClientProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call QueryClientProvider() from the server but QueryClientProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/providers/query-client-provider.tsx\",\n    \"QueryClientProvider\",\n);\nexport const getQueryClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call getQueryClient() from the server but getQueryClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/providers/query-client-provider.tsx\",\n    \"getQueryClient\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,iDACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,iDACA"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/utils/classnames.ts"],"sourcesContent":["// this is a great tailwind utility function for merging tailwind classes!\n// if you wanna know how and why to use it, checkout this post:\n// https://www.reddit.com/r/tailwindcss/comments/1egbuvx/the_buzz_around_cn_function_and_why_do_we_use_it/\n\nimport { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport const cn = (...inputs: ClassValue[]) => {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":"AAAA,0EAA0E;AAC1E,+DAA+D;AAC/D,0GAA0G;;;;AAE1G;AACA;;;AAEO,MAAM,KAAK,CAAC,GAAG;IACpB,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasuwini/Documents/Frontend/MONGO-REDDIT/ed-frontend/app/layout.tsx"],"sourcesContent":["import { Albert_Sans } from 'next/font/google'\nimport type { Metadata } from 'next'\nimport { Toaster } from 'sonner'\n\nimport './globals.css'\nimport { QueryClientProvider } from 'providers/query-client-provider'\nimport { cn } from 'utils/classnames'\n\nconst albertSans = Albert_Sans({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'Social media app',\n  description: 'This is a practice repository for a social media app',\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang='en'>\n      <body\n        className={cn(\n          albertSans.className,\n          'flex min-h-screen flex-col items-center bg-zinc-50 font-medium text-zinc-800',\n        )}\n      >\n        <QueryClientProvider>\n          {children}\n          <Toaster />\n        </QueryClientProvider>\n      </body>\n    </html>\n  )\n}\n"],"names":[],"mappings":";;;;;;AAEA;AAGA;AACA;;;;;;;AAIO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC;QAAK,MAAK;kBACT,cAAA,8OAAC;YACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+IAAA,CAAA,UAAU,CAAC,SAAS,EACpB;sBAGF,cAAA,8OAAC,yIAAA,CAAA,sBAAmB;;oBACjB;kCACD,8OAAC,wIAAA,CAAA,UAAO;;;;;;;;;;;;;;;;;;;;;AAKlB"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}